{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","components/SearchTodo/SearchTodo.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","selectUser","query","randomaizer","className","type","onClick","map","todo","title","toLocaleLowerCase","includes","classNames","completed","checked","readOnly","userId","id","API_URL_USERS","getAllTodos","fetch","then","response","json","CurrentUser","state","user","componentDidMount","loadData","componentDidUpdate","prevProps","props","a","this","setState","clearUser","name","email","phone","React","PureComponent","SearchTodo","changeHandler","todoStatus","placeholder","value","onChange","App","filteredTodo","event","preventDefault","target","newState","prevState","sort","Math","random","status","filter","newTodos","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7eea001c.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void;\n  selectedUserId: number,\n  query: string,\n  randomaizer: () => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectedUserId, selectUser, query, randomaizer,\n}) => (\n  <div className=\"TodoList\">\n    <button\n      type=\"button\"\n      className=\"button TodoList__user-button--selected\"\n      onClick={randomaizer}\n    >\n      Randomizer\n    </button>\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => {\n          if (todo.title.toLocaleLowerCase().includes(query)) {\n            return (\n              (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item ',\n                    {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    },\n                  )}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>\n                      {todo.title}\n                      {query}\n                    </p>\n                  </label>\n                  <button\n                    className={classNames(\n                      'button',\n                      'TodoList__user-button',\n                      {\n                        'TodoList__user-button--selected': todo.userId === selectedUserId\n                          || selectedUserId === 0,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              )\n            );\n          }\n\n          return null;\n        })}\n      </ul>\n    </div>\n  </div>\n);\n","const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nconst API_URL_USERS = 'https://mate.academy/students-api/users';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(API_URL_TODOS).then(response => response.json());\n}\n\nexport function getUsers(): Promise<User[]> {\n  return fetch(API_URL_USERS).then(response => response.json());\n}\n\nexport function getUserById(userId: number): Promise<User> {\n  return fetch(`${API_URL_USERS}/${userId}`).then(response => response.json());\n}\n","import React from 'react';\nimport { getUserById } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount = () => {\n    this.loadData();\n  };\n\n  componentDidUpdate = (prevProps: Props) => {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  };\n\n  async loadData() {\n    const user = await getUserById(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectedUserId, clearUser } = this.props;\n\n    return (\n      !user\n        ? 'User not founded'\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button TodoList__user-button--selected\"\n              onClick={clearUser}\n            >\n              remove\n            </button>\n          </div>\n        )\n    );\n  }\n}\n","import React from 'react';\n\ntype Props = {\n  changeHandler: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void,\n  query: string,\n  todoStatus: string,\n};\n\nexport const SearchTodo: React.FC <Props> = ({ changeHandler, query, todoStatus }) => (\n  <form className=\"form\">\n    <input\n      className=\"input\"\n      type=\"text\"\n      placeholder=\"Text input\"\n      value={query}\n      name=\"query\"\n      onChange={changeHandler}\n    />\n    <div className=\"select\">\n      <select\n        name=\"todoStatus\"\n        value={todoStatus}\n        onChange={changeHandler}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </div>\n  </form>\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { SearchTodo } from './components/SearchTodo';\nimport { getAllTodos } from './api/api';\n\ntype State = {\n  selectedUserId: number;\n  todos: Todo[],\n  filteredTodo: Todo[],\n  query: string,\n  todoStatus: 'all' | 'active' | 'completed'\n};\n\ntype Props = {};\n\nexport class App extends React.Component<Props, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    filteredTodo: [],\n    query: '',\n    todoStatus: 'all',\n  };\n\n  componentDidMount = async () => {\n    const todos = await getAllTodos();\n\n    this.setState({\n      todos,\n      filteredTodo: todos,\n    });\n  };\n\n  changeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    const newState = { [name]: value } as Pick<State, 'query' | 'todoStatus'>;\n\n    this.setState(newState);\n    this.loadData();\n  };\n\n  randomaizer = () => {\n    this.setState((prevState) => ({\n      filteredTodo: [...prevState.filteredTodo].sort(() => Math.random() - 0.5),\n    }));\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  selectUser = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({ selectedUserId: userId });\n    }\n  };\n\n  filteredTodo = (status: boolean) => {\n    const { todos } = this.state;\n    const result = [...todos.filter(todo => todo.completed === status)];\n\n    return result;\n  };\n\n  async loadData() {\n    const { todoStatus, todos } = this.state;\n    let newTodos;\n\n    switch (todoStatus) {\n      case 'active':\n        newTodos = this.filteredTodo(false);\n        break;\n      case 'completed':\n        newTodos = this.filteredTodo(true);\n        break;\n      default:\n        newTodos = [...todos];\n        break;\n    }\n\n    this.setState({ filteredTodo: newTodos });\n  }\n\n  render() {\n    const {\n      selectedUserId,\n      filteredTodo,\n      todoStatus,\n      query,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <SearchTodo\n            changeHandler={this.changeHandler}\n            query={query}\n            todoStatus={todoStatus}\n          />\n          <TodoList\n            todos={filteredTodo}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            query={query}\n            randomaizer={this.randomaizer}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}